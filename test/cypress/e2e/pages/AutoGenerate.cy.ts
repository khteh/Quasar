describe('AutoGenerated Page tests', () => {
  beforeEach(() => {
    cy.visit('/#/autogenerate');
  });
  it('Verify Toggle Button from auto-generated page', () => {
    cy.get('[data-test="toggle-setting-0"]').contains("Auto Generated Toggle Button");
    cy.get('[data-test="toggle-setting-0"]').find('.q-toggle__inner').should('have.class', 'q-toggle__inner--falsy');
    cy.get('[data-test="toggle-setting-0"]').find('input').click({ force: true });
    cy.get('[data-test="toggle-setting-0"]').find('.q-toggle__inner').should('have.class', 'q-toggle__inner--truthy')
    cy.get('[data-test="toggle-setting-0"]').find('input').click({ force: true });
    cy.get('[data-test="toggle-setting-0"]').find('.q-toggle__inner').should('have.class', 'q-toggle__inner--falsy')
  });
  it('Verify Edit String TextBox from auto-generated page', () => {
    // activate popup editor
    cy.get('[data-test="popup-edit-setting-1"]').contains("Auto Generated Edit box").should("be.visible").click();

    // initial condition
    cy.focused()                                // after click <input> should have focus
      .as('input')                              // save a reference
      .should('have.prop', 'tagName', 'INPUT')  // verify it is the input
    cy.get('@input')
      .invoke('val')
      .should('eq', '')                // displayed text is also in the input

    // edit action
    cy.get('@input')
      .clear()
      .type("Hello World!!!")
    cy.get('@input')
      .invoke('val')
      .should('eq', "Hello World!!!")              // verify input

    // back to display mode
    cy.get('body').click()                     // go back to display mode
    cy.contains('[data-test="popup-edit-setting-1"]', "Auto Generated Edit box")
      .should('be.visible')
      .and('contain', "Hello World!!!")            // verify display element     
  });
  it('Verify Edit Numeric TextBox with invalid input text should fail', () => {
    // activate popup editor
    cy.get('[data-test="popup-edit-setting-2"]').contains("Auto Generated Edit box (Number)").should("be.visible").click();

    // initial condition
    cy.focused()                                // after click <input> should have focus
      .as('input')                              // save a reference
      .should('have.prop', 'tagName', 'INPUT')  // verify it is the input
    cy.get('@input')
      .invoke('val')
      .should('eq', '')                // displayed text is also in the input

    // edit action
    cy.get('@input')
      .clear()
      .type("Hello World!!!")
    cy.get('@input')
      .invoke('val')
      .should('eq', "")              // verify input

    // back to display mode
    cy.get('body').click()                     // go back to display mode
    cy.contains('[data-test="popup-edit-setting-2"]', "Auto Generated Edit box (Number)")
      .should('be.visible')
      .and('contain', "")            // verify display element     
  });
  it('Verify Edit Numeric TextBox with valid input text should pass', () => {
    // activate popup editor
    cy.get('[data-test="popup-edit-setting-2"]').contains("Auto Generated Edit box (Number)").should("be.visible").click();

    // initial condition
    cy.focused()                                // after click <input> should have focus
      .as('input')                              // save a reference
      .should('have.prop', 'tagName', 'INPUT')  // verify it is the input
    cy.get('@input')
      .invoke('val')
      .should('eq', '')                // displayed text is also in the input

    // edit action
    cy.get('@input')
      .clear()
      .type(123)
    cy.get('@input')
      .invoke('val')
      .should('eq', "123")              // verify input

    // back to display mode
    cy.get('body').click()                     // go back to display mode
    cy.contains('[data-test="popup-edit-setting-2"]', "Auto Generated Edit box (Number)")
      .should('be.visible')
      .and('contain', 123)            // verify display element     
  });
  it('Verify Single-Select from auto-generated page', () => {
    cy.get('[data-test="dropdown-setting-3"]').find('label').should('contain', "Auto Generated Selection box");
    //cy.get('[data-test="dropdown-setting-3"]').should('have.length', 3) Can't verify this.internalOptions model 'value' with unbound UI element.
    cy.get('[data-test="dropdown-setting-3"]').find('label').select("Option 1");
    cy.get('[data-test="dropdown-setting-3"]').find('span').should('have.text', 'Option 1');
    //cy.get('[data-test="dropdown-setting-3"]').should('have.value', 1); Can't verify model 'value' with unbound UI element.
    cy.get('[data-test="dropdown-setting-3"]').find('label').select("Option 2");
    cy.get('[data-test="dropdown-setting-3"]').find('span').should('have.text', 'Option 2');
    cy.get('[data-test="dropdown-setting-3"]').find('label').select("Option 3");
    cy.get('[data-test="dropdown-setting-3"]').find('span').should('have.text', 'Option 3');
    cy.get('body').click();
    // remove the focus from <select> element
  });
  it('Verify Multiple-Select from auto-generated page', () => {
    cy.get('[data-test="multidropdown-setting-4"]').find('button').should('exist');
    cy.get('[data-test="multidropdown-setting-4"]').find('button').should('be.visible');
    cy.get('[data-test="multidropdown-setting-4"]').find('button').should('be.disabled');
    cy.get('[data-test="multidropdown-setting-4"]').should('have.value', '');
    cy.get('[data-test="multidropdown-setting-4"]').find('label').should('contain', "Auto Generated Multi-Selection box").should('be.visible').click();
    cy.get('[data-test="multidropdown-setting-4"]').should('have.value', '');
    cy.get('[data-test="multidropdown-setting-4"]').find('span').should('have.text', 'done'); // "done" comes from icon
    //cy.get('[data-test="multidropdown-setting-4"]').find('label').select(['Option 1']);
    cy.withinSelectMenu({
      persistent: true,
      fn: () => {
        cy.get('.q-item[role=option]').contains("Option 1").click().click()
      },
    })
    cy.get('body').click();
    cy.get('[data-test="multidropdown-setting-4"]').find('span').should('have.text', 'Option 1done'); // "done" comes from icon
    cy.contains('[data-test="multidropdown-setting-4"]', "Auto Generated Multi-Selection box")
      .should('be.visible')
      .and('contain', "Option 1")            // verify display element     

    cy.withinSelectMenu({
      persistent: true,
      fn: () => {
        //cy.get('.q-item[role=option]').contains("Option 1").click()
        cy.get('.q-item[role=option]').contains("Option 3").click()
      },
    })
    cy.get('body').click();
    cy.get('[data-test="multidropdown-setting-4"]').find('span').should('have.text', 'Option 3, Option 1done'); // "done" comes from icon
    cy.contains('[data-test="multidropdown-setting-4"]', "Auto Generated Multi-Selection box")
      .should('be.visible')
      .and('contain', "Option 3, Option 1")            // verify display element     

    cy.withinSelectMenu({
      persistent: true,
      fn: () => {
        cy.get('.q-item[role=option]').contains("Option 2").click()
      },
    })
    cy.get('body').click();
    cy.get('[data-test="multidropdown-setting-4"]').find('span').should('have.text', 'Option 3, Option 1done'); // "done" comes from icon
    cy.contains('[data-test="multidropdown-setting-4"]', "Auto Generated Multi-Selection box")
      .should('be.visible')
      .and('contain', "Option 3, Option 1")            // verify display element     

    /*
  cy.withinSelectMenu({
    persistent: true,
    fn: () => {
      cy.get('.q-item[role=option]').contains("Option 1").click().click()
    },
  })
  cy.get('body').click();
  cy.get('[data-test="multidropdown-setting-4"]').find('span').should('have.text', 'done'); // "done" comes from icon
  cy.contains('[data-test="multidropdown-setting-4"]', "Auto Generated Multi-Selection box")
    .should('be.visible')
    .and('not.contain', "Option 1")            // verify display element     
*/
    //cy.get('[data-test="multidropdown-setting-4"]').find('label').then($select => {$select.removeClass('q-select')}).select(["Option 1"]);
    //cy.get('[data-test="multidropdown-setting-4"]').find('label').select("Option 1");
    //cy.get('[data-test="multidropdown-setting-4"]').find('span').should('have.text', '');
  });
})